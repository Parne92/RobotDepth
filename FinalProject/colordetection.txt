# Convert Image to Image HSV
        hsv = cv2.cvtColor(color_image, cv2.COLOR_BGR2HSV)

        # Set range for red color and 
        # define mask
        yellow_lower = np.array([33, 80, 56], np.uint8)
        yellow_upper = np.array([55, 125, 197], np.uint8)
        yellow_mask = cv2.inRange(hsv, yellow_lower, yellow_upper)

        # Set range for blue color and 
        # define mask
        blue_lower = np.array([94, 80, 2], np.uint8)
        blue_upper = np.array([120, 255, 255], np.uint8)
        blue_mask = cv2.inRange(hsv, blue_lower, blue_upper)
  
        # Set range for green color and 
        # define mask
        green_lower = np.array([61, 120, 101], np.uint8)
        green_upper = np.array([66, 155,212], np.uint8)
        green_mask = cv2.inRange(hsv, green_lower, green_upper)
  
        # Set range for pink color and
        # define mask
        pink_lower = np.array([120, 111, 126], np.uint8)
        pink_upper = np.array([179, 255, 255], np.uint8)
        pink_mask = cv2.inRange(hsv, pink_lower, pink_upper)

        # Morphological Transform, Dilation
        # for each color and bitwise_and operator
        # between imageFrame and mask determines
        # to detect only that particular color
        kernel = np.ones((5, 5), "uint8")
      
        # For red color
        yellow_mask = cv2.dilate(yellow_mask, kernel)
        res_yellow = cv2.bitwise_and(color_image, color_image, 
                              mask = yellow_mask)
      
        # For green color
        green_mask = cv2.dilate(green_mask, kernel)
        res_green = cv2.bitwise_and(color_image, color_image,
                                mask = green_mask)
      
        # For blue color
        pink_mask = cv2.dilate(pink_mask, kernel)
        res_pink = cv2.bitwise_and(color_image, color_image,
                               mask = pink_mask)
   
        # Creating contour to track red color
        contours, hierarchy = cv2.findContours(yellow_mask,
                                           cv2.RETR_TREE,
                                           cv2.CHAIN_APPROX_SIMPLE)
        
        for pic, contour in enumerate(contours):
            area = cv2.contourArea(contour)
            if(area > 300):
                color_to_save = "yellow"
                x, y, w, h = cv2.boundingRect(contour)
                color_image = cv2.rectangle(color_image, (x, y), 
                                       (x + w, y + h), 
                                       (51, 255, 255), 2)
                

        # Creating contour to track green color
        contours, hierarchy = cv2.findContours(green_mask,
                                           cv2.RETR_TREE,
                                           cv2.CHAIN_APPROX_SIMPLE)
      
        for pic, contour in enumerate(contours):
            area = cv2.contourArea(contour)
            if(area > 300):
                color_to_save = "green"
                x, y, w, h = cv2.boundingRect(contour)
                color_image = cv2.rectangle(color_image, (x, y), 
                                       (x + w, y + h),
                                       (0, 255, 0), 2)
                

        contours, hierarchy = cv2.findContours(pink_mask,
                                           cv2.RETR_TREE,
                                           cv2.CHAIN_APPROX_SIMPLE)
        for pic, contour in enumerate(contours):
            area = cv2.contourArea(contour)
            if(area > 300):
                color_to_save = "pink"
                x, y, w, h = cv2.boundingRect(contour)
                color_image = cv2.rectangle(color_image, (x, y),
                                       (x + w, y + h),
                                       (255, 77, 255), 2)
              
